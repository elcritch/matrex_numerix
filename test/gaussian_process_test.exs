defmodule MatrexNumerix.GP do
  use ExUnit.Case, async: true

  test "test distance iso" do

    x = Matrex.new("""
      4.854610892030431
      5.176527683588912
      4.54059036660107
      1.0556100264266548
      3.484869973967117
      4.3852256899673066
      2.2228785289423754
      0.7556418525131632
      1.9941157865846477
      3.4567590405289352
      """)

    dist_expected = Matrex.new("""
      0.0       0.321917  0.314021  3.799     1.36974    0.469385  2.63173   4.09897   2.8605    1.39785
      0.321917  0.0       0.635937  4.12092   1.69166    0.791302  2.95365   4.42089   3.18241   1.71977
      0.314021  0.635937  0.0       3.48498   1.05572    0.155365  2.31771   3.78495   2.54647   1.08383
      3.799     4.12092   3.48498   0.0       2.42926    3.32962   1.16727   0.299968  0.938506  2.40115
      1.36974   1.69166   1.05572   2.42926   0.0        0.900356  1.26199   2.72923   1.49075   0.0281109
      0.469385  0.791302  0.155365  3.32962   0.900356   0.0       2.16235   3.62958   2.39111   0.928467
      2.63173   2.95365   2.31771   1.16727   1.26199    2.16235   0.0       1.46724   0.228763  1.23388
      4.09897   4.42089   3.78495   0.299968  2.72923    3.62958   1.46724   0.0       1.23847   2.70112
      2.8605    3.18241   2.54647   0.938506  1.49075    2.39111   0.228763  1.23847   0.0       1.46264
      1.39785   1.71977   1.08383   2.40115   0.0281109  0.928467  1.23388   2.70112   1.46264   0.0
      """)

      xx = x |> Matrex.transpose()
      yy = x |> Matrex.transpose()

      dist = MatrexNumerix.Distance.diff_conv(:euclidian, xx, yy)

      assert abs(dist |> Matrex.subtract(dist_expected) |> Matrex.sum()) < 1.0e-4
  end

  test "test distance ard" do
    x = Matrex.new("""
        4.85461  4.54059  3.48487  2.22288   1.99412  2.14055  4.9729    0.188993
        5.17653  1.05561  4.38523  0.755642  3.45676  6.1361   0.859327  3.7586
      """)

    y = Matrex.new("""
        0.05267470961035986
        -0.048384237911613726
        0.2850282970764706
        0.6186369332781118
        -0.7350901977116585
        1.2021311256811988
        -0.23481964557559754
        0.3316044775935818
      """) |> Matrex.transpose()

    diff_expected1 = Matrex.new("""
        0.0         0.0986089   1.87619  6.92602     8.18243    7.36614      0.0139934  21.768
        0.0986089   0.0         1.11455  5.37179     6.48453    5.76021      0.186896   18.9364
        1.87619     1.11455     0.0      1.59262     2.22235    1.8072       2.21425    10.8628
        6.92602     5.37179     1.59262  0.0         0.0523324  0.00677842   7.56264     4.13669
        8.18243     6.48453     2.22235  0.0523324   0.0        0.0214422    8.87318     3.25847
        7.36614     5.76021     1.8072   0.00677842  0.0214422  0.0          8.02225     3.80857
        0.0139934   0.186896    2.21425  7.56264     8.87318    8.02225      0.0        22.8858
        21.768      18.9364     10.8628   4.13669     3.25847    3.80857     22.8858      0.0
      """)

    diff_expected2 = Matrex.new("""
          0.0       16.982       0.626159  19.5442     2.9576     0.92077  18.6382     2.01052
        16.982      0.0        11.0863     0.0899809  5.76552   25.8113    0.038527   7.30616
          0.626159  11.0863      0.0       13.1739     0.86205    3.06554  12.432      0.39266
        19.5442     0.0899809  13.1739     0.0        7.29603   28.9493    0.0107506  9.01776
          2.9576     5.76552     0.86205    7.29603    0.0        7.17884   6.74665    0.091108
          0.92077   25.8113      3.06554   28.9493     7.17884    0.0      27.8443     5.65248
        18.6382     0.038527   12.432      0.0107506  6.74665   27.8443    0.0        8.40578
          2.01052    7.30616     0.39266    9.01776    0.091108   5.65248   8.40578    0.0
      """)

      xx = x
      yy = x

      [dist1, dist2] = MatrexNumerix.Distance.diff_conv(:sq_euclidian, xx, yy)

      # IO.inspect(dist1, label: :dist1)

      # squaring seems to increase errors to ~1.0e-3 range
      assert abs(dist1 |> Matrex.subtract(diff_expected1) |> Matrex.sum()) < 1.0e-3
      assert abs(dist2 |> Matrex.subtract(diff_expected2) |> Matrex.sum()) < 1.0e-3
  end

  test "test gp cov" do

    x = Matrex.new("""
      4.854610892030431
      5.176527683588912
      4.54059036660107
      1.0556100264266548
      3.484869973967117
      4.3852256899673066
      2.2228785289423754
      0.7556418525131632
      1.9941157865846477
      3.4567590405289352
      """) |> Matrex.transpose()

    y = Matrex.new("""
        -0.9672931901680022
        -1.0070469610508248
        -1.0903962829715461
        0.8811208605233783
        -0.3332131916909575
        -0.9769651482106089
        0.9159341732111771
        0.7362180710829012
        0.9508490881368652
        -0.3064317818816142
      """) |> Matrex.transpose()

    logNoise = -1.0
    mu = %MatrexNumerix.GP.MeanZero{}
    kern = %MatrexNumerix.GP.Mat32Iso{sigma2: 1.0, scale: 1.0}
    gpe = MatrexNumerix.GPE.calculate(x, y, mu, kern, logNoise)

    # IO.inspect(gpe, label: :gpe)
    cov_res = MatrexNumerix.GP.Kernel.cov(kern, x, x, gpe.kdata)

    # IO.inspect(cov_res, label: :COV_RES)

    # 4] Î£buffer:
    expected_cov = Matrex.new """
     1.0 0.891860705058954 0.8962031669952231 0.010519326759677965 0.3144852326610042 0.8041120707773918 0.05825048219777887 0.006685560932908665 0.04198798460196675 0.3038644542413161;
     0.891860705058954 1.0 0.698488956618627 0.006466380874689093 0.20984455523780993 0.6020332474468677 0.03669982451747015 0.004091647168550137 0.0262934018853028 0.2023482953743353;
     0.8962031669952231 0.698488956618627 1.0 0.016821456790142585 0.45439285757184966 0.9696773331736784 0.09052927935127542 0.010743892517028699 0.06572610840492199 0.4402486378151663;
     0.010519326759677965 0.006466380874689093 0.016821456790142585 1.0 0.07749962050911277 0.02117368253961235 0.40014586123829415 0.9038071951544269 0.5167204841999194 0.08060566333984757;
     0.3144852326610042 0.20984455523780993 0.45439285757184966 0.07749962050911277 1.0 0.5381247731253018 0.35803683258002683 0.05069430553405346 0.27086807533238516 0.9988524453406431;
     0.8041120707773918 0.6020332474468677 0.9696773331736784 0.02117368253961235 0.5381247731253018 1.0 0.11212493763757392 0.01356064636227726 0.08174306236426206 0.5223017924975333;
     0.05825048219777887 0.03669982451747015 0.09052927935127542 0.40014586123829415 0.35803683258002683 0.11212493763757392 1.0 0.27892104237355764 0.9394563878756726 0.37015590818116373;
     0.006685560932908665 0.004091647168550137 0.010743892517028699 0.9038071951544269 0.05069430553405346 0.01356064636227726 0.27892104237355764 1.0 0.36815392190869095 0.05277118436242623;
     0.04198798460196675 0.0262934018853028 0.06572610840492199 0.5167204841999194 0.27086807533238516 0.08174306236426206 0.9394563878756726 0.36815392190869095 1.0 0.280517364073899;
     0.3038644542413161 0.2023482953743353 0.4402486378151663 0.08060566333984757 0.9988524453406431 0.5223017924975333 0.37015590818116373 0.05277118436242623 0.280517364073899 1.0;
    """

    assert abs(cov_res |> Matrex.subtract(expected_cov) |> Matrex.sum()) < 1.0e-5

    # sigma_buffer = MatrexNumerix.GP.Kernel.cov(kern, x, x, gpe.kdata)
    # {sigma_buffer_noise, chol, chol_comb} = MatrexNumerix.GP.Kernel.update_cK(x, kern, logNoise, gpe.kdata)
    {sigma_buffer_noise, chol, chol_comb} = MatrexNumerix.GP.Kernel.update_cK(gpe)

    expected_cov_noise = Matrex.new """
      1.1353352832366128 0.891860705058954 0.8962031669952231 0.010519326759677965 0.3144852326610042 0.8041120707773918 0.05825048219777887 0.006685560932908665 0.04198798460196675 0.3038644542413161;
      0.891860705058954 1.1353352832366128 0.698488956618627 0.006466380874689093 0.20984455523780993 0.6020332474468677 0.03669982451747015 0.004091647168550137 0.0262934018853028 0.2023482953743353;
      0.8962031669952231 0.698488956618627 1.1353352832366128 0.016821456790142585 0.45439285757184966 0.9696773331736784 0.09052927935127542 0.010743892517028699 0.06572610840492199 0.4402486378151663;
      0.010519326759677965 0.006466380874689093 0.016821456790142585 1.1353352832366128 0.07749962050911277 0.02117368253961235 0.40014586123829415 0.9038071951544269 0.5167204841999194 0.08060566333984757;
      0.3144852326610042 0.20984455523780993 0.45439285757184966 0.07749962050911277 1.1353352832366128 0.5381247731253018 0.35803683258002683 0.05069430553405346 0.27086807533238516 0.9988524453406431;
      0.8041120707773918 0.6020332474468677 0.9696773331736784 0.02117368253961235 0.5381247731253018 1.1353352832366128 0.11212493763757392 0.01356064636227726 0.08174306236426206 0.5223017924975333;
      0.05825048219777887 0.03669982451747015 0.09052927935127542 0.40014586123829415 0.35803683258002683 0.11212493763757392 1.1353352832366128 0.27892104237355764 0.9394563878756726 0.37015590818116373;
      0.006685560932908665 0.004091647168550137 0.010743892517028699 0.9038071951544269 0.05069430553405346 0.01356064636227726 0.27892104237355764 1.1353352832366128 0.36815392190869095 0.05277118436242623;
      0.04198798460196675 0.0262934018853028 0.06572610840492199 0.5167204841999194 0.27086807533238516 0.08174306236426206 0.9394563878756726 0.36815392190869095 1.1353352832366128 0.280517364073899;
      0.3038644542413161 0.2023482953743353 0.4402486378151663 0.08060566333984757 0.9988524453406431 0.5223017924975333 0.37015590818116373 0.05277118436242623 0.280517364073899 1.1353352832366128
    """

    # IO.inspect(sigma_buffer_noise, label: :sigma_buffer_noise)
    # IO.inspect(sigma_buffer_noise |> Matrex.subtract(expected_cov_noise), label: :sigma_buffer_noise)

    assert abs(sigma_buffer_noise |> Matrex.subtract(expected_cov_noise) |> Matrex.sum()) < 1.0e-4

    # 14] chol: LinearAlgebra.Cholesky{Float64,Array{Float64,2}}
    expected_chol = Matrex.new """
      1.0655211322337126 0.8370183172146907 0.8410937520464389 0.00987247126448417 0.29514687522126465 0.7546655307452099 0.054668537709491566 0.006274451750096541 0.03940605524542245 0.2851791907724136;
      0.0 0.6593448414022061 -0.008374859394259212 -0.0027255213008690465 -0.05641780030000372 -0.04494707973204778 -0.013739006286075462 -0.0017596010523008223 -0.010146721023951645 -0.055133381969485376;
      0.0 0.0 0.6540844328029699 0.012987554218730425 0.31444590855187565 0.5114881628851006 0.06793136998236544 0.008334939141939307 0.049683102904699565 0.3056554443042809;
      0.0 0.0 0.0 1.0653927503586642 0.06603024118416854 0.006530722402382234 0.3742154611352331 0.8481681560170662 0.4840079226944727 0.06914844885777402;
      0.0 0.0 0.0 0.0 0.970466081291454 0.15619834858243634 0.3040355424783682 -0.01018323846938514 0.21750707350581863 0.8355719145273359;
      0.0 0.0 0.0 0.0 0.0 0.5270049950035312 -0.02737903874003101 0.0010145568326900935 -0.02087054376466274 0.03283293062958291;
      0.0 0.0 0.0 0.0 0.0 0.0 0.9456842859510831 -0.03837025302551177 0.7253616614372566 0.057126319823606816;
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6436280930906934 -0.02016224197949403 0.0005518174031733379;
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5680197599089813 -0.004256596637965718;
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.500221349757034
    """

    expected_chol_comb = Matrex.new """
      1.0655211322337126 0.8370183172146907 0.8410937520464389 0.00987247126448417 0.29514687522126465 0.7546655307452099 0.054668537709491566 0.006274451750096541 0.03940605524542245 0.2851791907724136;
      0.891860705058954 0.6593448414022061 -0.008374859394259212 -0.0027255213008690465 -0.05641780030000372 -0.04494707973204778 -0.013739006286075462 -0.0017596010523008223 -0.010146721023951645 -0.055133381969485376;
      0.8962031669952231 0.698488956618627 0.6540844328029699 0.012987554218730425 0.31444590855187565 0.5114881628851006 0.06793136998236544 0.008334939141939307 0.049683102904699565 0.3056554443042809;
      0.010519326759677965 0.006466380874689093 0.016821456790142585 1.0653927503586642 0.06603024118416854 0.006530722402382234 0.3742154611352331 0.8481681560170662 0.4840079226944727 0.06914844885777402;
      0.3144852326610042 0.20984455523780993 0.45439285757184966 0.07749962050911277 0.970466081291454 0.15619834858243634 0.3040355424783682 -0.01018323846938514 0.21750707350581863 0.8355719145273359;
      0.8041120707773918 0.6020332474468677 0.9696773331736784 0.02117368253961235 0.5381247731253018 0.5270049950035312 -0.02737903874003101 0.0010145568326900935 -0.02087054376466274 0.03283293062958291;
      0.05825048219777887 0.03669982451747015 0.09052927935127542 0.40014586123829415 0.35803683258002683 0.11212493763757392 0.9456842859510831 -0.03837025302551177 0.7253616614372566 0.057126319823606816;
      0.006685560932908665 0.004091647168550137 0.010743892517028699 0.9038071951544269 0.05069430553405346 0.01356064636227726 0.27892104237355764 0.6436280930906934 -0.02016224197949403 0.0005518174031733379;
      0.04198798460196675 0.0262934018853028 0.06572610840492199 0.5167204841999194 0.27086807533238516 0.08174306236426206 0.9394563878756726 0.36815392190869095 0.5680197599089813 -0.004256596637965718;
      0.3038644542413161 0.2023482953743353 0.4402486378151663 0.08060566333984757 0.9988524453406431 0.5223017924975333 0.37015590818116373 0.05277118436242623 0.280517364073899 0.500221349757034
    """

    # IO.inspect(chol, label: :chol)
    # IO.inspect(expected_chol, label: :expected_chol)
    # IO.inspect(expected_chol, label: :expected_chol)
    # IO.inspect(expected_chol_comb, label: :expected_chol_comb)
    # IO.inspect(chol_comb |> Matrex.subtract(expected_chol_comb), label: :diff_expected_chol_comb)

    assert abs(chol |> Matrex.subtract(expected_chol) |> Matrex.sum()) < 1.0e-4
    assert abs(chol_comb |> Matrex.subtract(expected_chol_comb) |> Matrex.sum()) < 1.0e-4

    gpe! = MatrexNumerix.GP.Kernel.update_mll(gpe)
    # IO.inspect(gpe!, label: :gpe!)

    expected_y = Matrex.new """
    -0.9672931901680022, -1.0070469610508248, -1.0903962829715461, 0.8811208605233783, -0.3332131916909575, -0.9769651482106089, 0.9159341732111771, 0.7362180710829012, 0.9508490881368652, -0.3064317818816142
    """

    assert gpe!.y == expected_y

    expected_alpha = Matrex.new """
    0.23919488774913653, -0.5874057343866655, -0.6326628757776599, 0.3666077752686025, -0.110015693382195, -0.1669449391903989, 0.5696604623620416, 0.15281025254401714, 0.2519635957792353, -0.09142496867424635
    """

    assert abs(gpe!.y |> Matrex.subtract(expected_y) |> Matrex.sum()) < 1.0e-4
    assert abs(gpe!.alpha |> Matrex.subtract(expected_alpha) |> Matrex.sum()) < 1.0e-4

  end

  test "test gp predict" do

    x = Matrex.new("""
      4.854610892030431
      5.176527683588912
      4.54059036660107
      1.0556100264266548
      3.484869973967117
      4.3852256899673066
      2.2228785289423754
      0.7556418525131632
      1.9941157865846477
      3.4567590405289352
      """) |> Matrex.transpose()

    y = Matrex.new("""
        -0.9672931901680022
        -1.0070469610508248
        -1.0903962829715461
        0.8811208605233783
        -0.3332131916909575
        -0.9769651482106089
        0.9159341732111771
        0.7362180710829012
        0.9508490881368652
        -0.3064317818816142
      """) |> Matrex.transpose()

    logNoise = -1.0
    mu = %MatrexNumerix.GP.MeanZero{}
    kern = %MatrexNumerix.GP.Mat32Iso{sigma2: 1.0, scale: 1.0}
    gpe = MatrexNumerix.GPE.calculate(x, y, mu, kern, logNoise)

    expected_predict = Matrex.new """
      0.7556418525131632, 0.7155374522733983
      0.8556418525131632, 0.7603268324679152
      0.9556418525131631, 0.799490133986404
      1.0556418525131632, 0.8315147005670789
      1.1556418525131633, 0.855010332612245
      1.2556418525131632, 0.8724321323478192
      1.3556418525131633, 0.8863690569066349
      1.4556418525131631, 0.8984113239476194
      1.5556418525131632, 0.9092334573970726
      1.6556418525131633, 0.9186239678114371
      1.7556418525131632, 0.9254628425260988
      1.8556418525131633, 0.9276456829136437
      1.9556418525131634, 0.9219509386590712
      2.0556418525131632, 0.9040476728217315
      2.1556418525131633, 0.8709176330082984
      2.255641852513163, 0.8200073928445872
      2.3556418525131635, 0.7513164760224738
      2.455641852513163, 0.6699021691799709
      2.5556418525131632, 0.5799775118391156
      2.6556418525131633, 0.4846377113582924
      2.755641852513163, 0.38612765788364745
      2.8556418525131635, 0.28606319064444985
      2.955641852513163, 0.18561739426736557
      3.0556418525131637, 0.08568166931794684
      3.1556418525131633, -0.012989795580356386
      3.255641852513163, -0.10964426631087569
      3.3556418525131635, -0.20339593685323715
      3.455641852513163, -0.2930852229695703
      3.5556418525131637, -0.3775666162139616
      3.6556418525131633, -0.4577557935442183
      3.755641852513163, -0.5350851294977351
      3.8556418525131635, -0.6104104527066443
      3.955641852513163, -0.6839830602110432
      4.055641852513164, -0.7553967004951299
      4.155641852513163, -0.8234965902281388
      4.255641852513163, -0.8862453595120121
      4.3556418525131635, -0.9405389067355531
      4.455641852513163, -0.9821651507677751
      4.555641852513164, -1.007372957908904
      4.655641852513163, -1.0150597476014436
      4.755641852513163, -1.0107139699374068
      4.8556418525131635, -0.999528569549293
      4.955641852513163, -0.9845137819459855
      5.055641852513163, -0.9642116268609635
      5.155641852513163, -0.9351499914157426
    """

    xx = expected_predict |> Matrex.column(1) |> Matrex.submatrix(1..1, 1..1) |> Matrex.transpose()
    # xx = expected_predict |> Matrex.column(1) |> Matrex.transpose()
    yy = expected_predict |> Matrex.column(2) |> Matrex.transpose()

    {mu, sigma} = MatrexNumerix.GPE.predict_y(gpe, xx)

    # 1] kernel: Type: Mat32Iso{Float64}, Params: [0.0, 0.0]
    # 2] xtrain: [4.854610892030431 5.176527683588912 4.54059036660107 1.0556100264266548 3.484869973967117 4.3852256899673066 2.2228785289423754 0.7556418525131632 1.9941157865846477 3.4567590405289352]
    # 3] xpred: [0.7556418525131632]
    # 4] crossdata: GaussianProcesses.IsotropicData{Array{Float64,2}}([4.098969039517268; 4.420885831075749; 3.7849485140879073; 0.2999681739134916; 2.7292281214539535; 3.6295838374541436; 1.4672366764292122; 0.0; 1.2384739340714845; 2.701117188015772])
    # 5] priordata: GaussianProcesses.IsotropicData{Array{Float64,2}}([0.0])
    # 7] Kfx: [0.006685560932908665; 0.004091647168550137; 0.010743892517028699; 0.9038071951544269; 0.05069430553405346; 0.01356064636227726; 0.27892104237355764; 1.0; 0.36815392190869095; 0.05277118436242623]
    # 8] Î±f: [0.23919488774913653, -0.5874057343866655, -0.6326628757776599, 0.3666077752686025, -0.110015693382195, -0.1669449391903989, 0.5696604623620416, 0.15281025254401714, 0.2519635957792353, -0.09142496867424635]
    # 9] mu: [0.7155374522733983]
    # 11] a.chol.U: [1.0655211322337126 0.8370183172146907 0.8410937520464389 0.00987247126448417 0.29514687522126465 0.7546655307452099 0.054668537709491566 0.006274451750096541 0.03940605524542245 0.2851791907724136; 0.0 0.6593448414022061 -0.008374859394259212 -0.0027255213008690465 -0.05641780030000372 -0.04494707973204778 -0.013739006286075462 -0.0017596010523008223 -0.010146721023951645 -0.055133381969485376; 0.0 0.0 0.6540844328029699 0.012987554218730425 0.31444590855187565 0.5114881628851006 0.06793136998236544 0.008334939141939307 0.049683102904699565 0.3056554443042809; 0.0 0.0 0.0 1.0653927503586642 0.06603024118416854 0.006530722402382234 0.3742154611352331 0.8481681560170662 0.4840079226944727 0.06914844885777402; 0.0 0.0 0.0 0.0 0.970466081291454 0.15619834858243634 0.3040355424783682 -0.01018323846938514 0.21750707350581863 0.8355719145273359; 0.0 0.0 0.0 0.0 0.0 0.5270049950035312 -0.02737903874003101 0.0010145568326900935 -0.02087054376466274 0.03283293062958291; 0.0 0.0 0.0 0.0 0.0 0.0 0.9456842859510831 -0.03837025302551177 0.7253616614372566 0.057126319823606816; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6436280930906934 -0.02016224197949403 0.0005518174031733379; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5680197599089813 -0.004256596637965718; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.500221349757034]
    # 12] r: [0.006685560932908665; 0.004091647168550137; 0.010743892517028699; 0.9038071951544269; 0.05069430553405346; 0.01356064636227726; 0.27892104237355764; 1.0; 0.36815392190869095; 0.05277118436242623]
    # 13] x: [0.006685560932908665; 0.004091647168550137; 0.010743892517028699; 0.9038071951544269; 0.05069430553405346; 0.01356064636227726; 0.27892104237355764; 1.0; 0.36815392190869095; 0.05277118436242623]
    # 16] v: [0.006685560932908665; 0.004091647168550137; 0.010743892517028699; 0.9038071951544269; 0.05069430553405346; 0.01356064636227726; 0.27892104237355764; 1.0; 0.36815392190869095; 0.05277118436242623]
    # 14] Kxx: [1.0]
    # 17] Lck: [0.006274451750096541; -0.0017596010523008223; 0.008334939141939307; 0.8481681560170661; -0.010183238469385134; 0.0010145568326900946; -0.03837025302551171; 0.4333587081936877; -0.007463652707877854; 0.00016844652264114157]
    # 14] Kxx: [0.09106633452567314]


    IO.inspect(mu, label: :mu)
    IO.inspect(sigma, label: :sigma)

  end
end
